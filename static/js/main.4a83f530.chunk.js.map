{"version":3,"sources":["assets/juno-logo.svg","assets/safiEmoji.png","components/Header.js","firebase.js","components/NameInput.js","SubmitBtn.js","components/LikeBtn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Logo","alt","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NameInput","props","for","name","title","id","type","inputType","value","onChange","placeholder","uniqueKey","Button","style","onClick","action","LikeButton","incrementLikes","newLike","likes","console","log","database","ref","update","state","this","Safi","App","handleChange","event","setState","message","target","handleToChange","messageTo","handleFromChange","messageFrom","handleFormSubmit","preventDefault","dbRef","error","document","getElementById","scrollIntoView","block","behaviour","push","allMesssages","on","response","newState","data","val","key","unshift","onSubmit","handleClick","map","newMessage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4a83f530.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/juno-logo.86172252.svg\";","module.exports = __webpack_public_path__ + \"static/media/safiEmoji.9c4a16e7.png\";","import React, { Component } from 'react';\nimport Logo from \"../assets/juno-logo.svg\"\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <div className=\"title\">\n                    <img src={Logo} alt=\"Juno Logo\" /> \n                    <h1>Yearbook!</h1>\n                </div>\n                <p className=\"cohort26\">Cohort 26, Winter II 2020</p>\n                <p className=\"covidCohort\">ðŸ˜·\"The Covid Cohort\"ðŸ¦ </p>\n                \n            </header>\n        )\n    }\n}\n\nexport default Header;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\nconst firebaseConfig = {\n    apiKey: \"AIzaSyClv1sxb2aGdLblCtPESRKcyg9HN4z9Bf4\",\n    authDomain: \"yearbook-7c442.firebaseapp.com\",\n    databaseURL: \"https://yearbook-7c442.firebaseio.com\",\n    projectId: \"yearbook-7c442\",\n    storageBucket: \"yearbook-7c442.appspot.com\",\n    messagingSenderId: \"282236459809\",\n    appId: \"1:282236459809:web:a0a28c52659ea7d9803c60\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react';\n\n    const NameInput = (props) => {\n        return (\n            <div className=\"form-group\">\n                <label for={props.name} className=\"form-label\">{props.title}</label>\n                <input\n                    id={props.name}\n                    name={props.name}\n                    type={props.inputType}\n                    value={props.value}\n                    onChange={props.onChange}\n                    placeholder={props.placeholder}\n                    uniqueKey={props.uniqueKey}\n\n                 />\n            </div>\n        )\n    }\n\nexport default NameInput","import React from 'react';\n\n\nconst Button = (props) => {\n    return (\n        <button\n            style={props.style}\n            className=\"submitBtn\"\n            onClick={props.action} >\n            Submit\n        </button>)\n}\n\n\nexport default Button;","import React, { Component } from 'react';\nimport firebase from \"../firebase\"\nimport Safi from \"../assets/safiEmoji.png\"\n\nclass LikeButton extends Component {\nconstructor(){\n    super()\n    this.state = {\n        likes: 0\n    }\n}\n\nincrementLikes = (props) => {\n    let newLike = this.props.likes + 1;\n    console.log(\"likes \" + this.props.likes);\n    // this.setState({\n    //     likes: newLike\n    // });\n    const uniqueKey = this.props.uniqueKey;\n    const dbRef = firebase.database().ref(uniqueKey);\n    dbRef.update({  \n        likes: newLike\n    });\n}\n\n    render() {\n        return (\n            <button \n            type=\"image\"\n            className=\"likes\" \n            onClick={this.incrementLikes}\n            >\n            <img src={Safi} alt=\"an emoji pic of Safi - the most ridiculous, yet beloved and very handsome instructor at Juno\"/>\n            {this.props.likes}\n            </button>\n           \n        )\n    }\n}\n\n\nexport default LikeButton","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport firebase from './firebase';\nimport Input from './components/NameInput';\nimport Button from './SubmitBtn';\nimport LikeButton from './components/LikeBtn';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      allMesssages: [],\n      messageTo: '',\n      messageFrom: '',\n      message: '',\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({ message: event.target.value })\n  }\n\n  handleToChange = (event) => {\n    this.setState({messageTo: event.target.value})\n  }\n\n  handleFromChange = (event) => {\n    this.setState({messageFrom: event.target.value})\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const dbRef = firebase.database().ref();\n\n    //error handling\n    //if the name input and the message input do not have a value, OR if there is no name but there is a message, OR there is a name but no message, then return an error \n    if (!(this.state.messageTo && this.state.messageFrom && this.state.message)) {\n      return this.setState({ error: 'You must fill out all fields!' })\n    } else {\n      //get the mailbox div and scroll it into view\n      document.getElementById('postsBoard').scrollIntoView({\n        //declaring the behavior of the scroll\n        block: 'start',\n        behaviour: 'smooth'\n      })\n    }\n    // here we grab whatever value this.state.userInput has and push it to the database\n    dbRef.push({\n      message: this.state.message,\n      messageTo: this.state.messageTo,\n      messageFrom: this.state.messageFrom,\n      likes: 0\n    });\n\n    // here we reset the state to an empty string\n    this.setState({\n      message: \"\",\n      messageTo: \"\",\n      messageFrom: \"\"\n    })\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      // Here we're creating a variable to store the new state we want to introduce to our app\n      const newState = [];\n      // Here we store the response from our query to Firebase inside of a variable called data\n      // .val() is a Firebase method that gets us the information we want\n      const data = response.val();\n      //data is an object, so we iterate through it using a for in loop the message \n      for (let key in data) {\n\n        // inside the loop, we push each note to an array we already created inside the .on() function called newState\n        // inside the loop, we push each message to an array we already created inside the .on() function called newState\n        let currentObj = data[key];\n        currentObj['id'] = key;\n        newState.unshift(data[key]);\n      }\n      // then, we call this.setState in order to update our component's state using the local array newState\n      this.setState({\n        allMesssages: newState\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <form action='' className='form-container' onSubmit={this.handleFormSubmit}>\n          <Input\n            placeholder=\"To:\"\n            type=\"text\"\n            onChange={this.handleToChange}\n            value={this.state.messageTo} />\n\n          <Input\n            placeholder=\"From:\"\n            type=\"text\"\n            onChange={this.handleFromChange}\n            value={this.state.messageFrom} />\n\n          <textarea\n            placeholder='Leave a message, joke or jibe for your belove student or mentor'\n            type=\"text\"\n            id=\"newMessage\"\n            onChange={this.handleChange} \n            value={this.state.message}/>\n\n          <Button onClick={this.handleClick} />\n         \n        </form>\n\n        {this.state.error && <p className=\"errorMessage\">{this.state.error}</p>}\n\n\n\n        <div className=\"postsBoard\" id=\"postsBoard\">\n          {this.state.allMesssages.map((newMessage) => {\n            return (\n              <div className=\"posts\"\n              key={newMessage.id}\n               >\n                <p className=\"toPrefix\">Yo, {newMessage.messageTo}</p>\n                <p>\"{newMessage.message}\"</p>\n                <p className=\"fromPrefix\">Hugs, {newMessage.messageFrom}</p>\n                <LikeButton\n                  uniqueKey={newMessage.id}\n                  likes={newMessage.likes}\n                  />\n              </div>\n            )\n          })}\n        </div>\n        <footer>\n          <p>Edith Werbel 2020</p>\n        </footer>\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}